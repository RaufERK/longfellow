import jwt from 'jsonwebtoken'
import bcrypt from 'bcrypt'
import { NextRequest } from 'next/server'

const JWT_SECRET = process.env.JWT_SECRET || 'fallback-secret-for-dev'
const MODERATOR_PASS = process.env.MODERATOR_PASS || ''

console.log('üîß Auth: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
console.log(
  'üîë Auth: JWT_SECRET:',
  JWT_SECRET ? `–∑–∞–≥—Ä—É–∂–µ–Ω (${JWT_SECRET.substring(0, 10)}...)` : '–ù–ï –ó–ê–ì–†–£–ñ–ï–ù'
)
console.log(
  'üîí Auth: MODERATOR_PASS:',
  MODERATOR_PASS ? '–∑–∞–≥—Ä—É–∂–µ–Ω' : '–ù–ï –ó–ê–ì–†–£–ñ–ï–ù'
)

export interface ModeratorPayload {
  role: 'moderator'
  iat?: number
  exp?: number
}

export function generateToken(): string {
  console.log('üé´ JWT: –°–æ–∑–¥–∞—é —Ç–æ–∫–µ–Ω...')
  console.log(
    'üîë JWT: JWT_SECRET –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:',
    JWT_SECRET ? `–µ—Å—Ç—å (${JWT_SECRET.substring(0, 10)}...)` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
  )

  const payload: ModeratorPayload = { role: 'moderator' }
  const token = jwt.sign(payload, JWT_SECRET, { expiresIn: '365d' })

  console.log('‚úÖ JWT: –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:', token.substring(0, 50) + '...')
  return token
}

export function verifyToken(token: string): ModeratorPayload | null {
  console.log('üîì JWT: –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω...')
  console.log(
    'üîë JWT: JWT_SECRET:',
    JWT_SECRET ? `–µ—Å—Ç—å (${JWT_SECRET.substring(0, 10)}...)` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
  )
  console.log('üé´ JWT: –¢–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', token.substring(0, 50) + '...')

  try {
    const payload = jwt.verify(token, JWT_SECRET) as ModeratorPayload
    console.log('‚úÖ JWT: –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω:', payload)
    return payload
  } catch (error) {
    console.error('‚ùå JWT: –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error)
    return null
  }
}

export async function verifyPassword(password: string): Promise<boolean> {
  return password === MODERATOR_PASS
}

export function getTokenFromRequest(req: NextRequest): string | null {
  console.log('üç™ Auth: –ü–æ–ª—É—á–∞—é —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–ø—Ä–æ—Å–∞...')

  const authHeader = req.headers.get('authorization')
  if (authHeader?.startsWith('Bearer ')) {
    console.log('üé´ Auth: –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ Authorization header')
    return authHeader.slice(7)
  }

  const cookieToken = req.cookies.get('moderator-token')?.value || null
  console.log(
    'üç™ Auth: –¢–æ–∫–µ–Ω –≤ cookie:',
    cookieToken ? `–¥–∞ (${cookieToken.substring(0, 20)}...)` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
  )
  console.log(
    'üç™ Auth: –í—Å–µ cookies:',
    Object.fromEntries(req.cookies.getAll().map((c) => [c.name, c.value]))
  )

  return cookieToken
}

export function isAuthenticated(req: NextRequest): boolean {
  console.log('üîç Auth: –ü—Ä–æ–≤–µ—Ä—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...')
  const token = getTokenFromRequest(req)
  console.log(
    'üé´ Auth: –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω:',
    token ? `–¥–∞ (${token.substring(0, 20)}...)` : '–Ω–µ—Ç'
  )

  if (!token) {
    console.log('‚ùå Auth: –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    return false
  }

  const payload = verifyToken(token)
  console.log('üìã Auth: Payload —Ç–æ–∫–µ–Ω–∞:', payload)

  const isAuth = payload?.role === 'moderator'
  console.log('‚úÖ Auth: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', isAuth)

  return isAuth
}
