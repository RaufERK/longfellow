import { NextRequest, NextResponse } from 'next/server'
import { verifyPassword, generateToken } from '@/lib/auth'
import {
  checkBruteForce,
  recordFailedAttempt,
  clearFailedAttempts,
} from '@/lib/redis'

export async function POST(req: NextRequest) {
  console.log('üîë API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ª–æ–≥–∏–Ω')

  try {
    const { password } = await req.json()
    console.log('üìù API: –ü–∞—Ä–æ–ª—å –ø–æ–ª—É—á–µ–Ω:', password ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')

    if (!password) {
      console.log('‚ùå API: –ü–∞—Ä–æ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω')
      return NextResponse.json({ error: '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, { status: 400 })
    }

    const clientIP =
      req.headers.get('x-forwarded-for') ||
      req.headers.get('x-real-ip') ||
      req.ip ||
      'unknown'

    console.log('üîç API: –ü—Ä–æ–≤–µ—Ä—è—é –±—Ä—É—Ç-—Ñ–æ—Ä—Å –¥–ª—è IP:', clientIP)
    const bruteForceCheck = await checkBruteForce(clientIP)

    if (!bruteForceCheck.allowed) {
      console.log('üö´ API: –ë—Ä—É—Ç-—Ñ–æ—Ä—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞')
      return NextResponse.json(
        {
          error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.',
        },
        { status: 429 }
      )
    }

    console.log('üîê API: –ü—Ä–æ–≤–µ—Ä—è—é –ø–∞—Ä–æ–ª—å...')
    const isValidPassword = await verifyPassword(password)
    console.log('üîê API: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', isValidPassword)

    if (!isValidPassword) {
      console.log('‚ùå API: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
      await recordFailedAttempt(clientIP)
      return NextResponse.json(
        {
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å',
          remainingAttempts: bruteForceCheck.remainingAttempts - 1,
        },
        { status: 401 }
      )
    }

    await clearFailedAttempts(clientIP)

    console.log('üé´ API: –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–æ–∫–µ–Ω...')
    const token = generateToken()
    console.log('üé´ API: –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω, –¥–ª–∏–Ω–∞:', token.length)

    const response = NextResponse.json({ success: true, token })

    console.log('üç™ API: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é cookie...')
    response.cookies.set('moderator-token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      maxAge: 365 * 24 * 60 * 60, // 1 –≥–æ–¥
    })

    console.log('‚úÖ API: –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
    return response
  } catch (error) {
    console.error('üí• API: –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}
