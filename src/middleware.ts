import { NextRequest, NextResponse } from 'next/server'

function isAuthenticated(req: NextRequest): boolean {
  console.log('üîç Middleware: –ü—Ä–æ–≤–µ—Ä—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...')

  const token = req.cookies.get('moderator-token')?.value
  console.log(
    'üé´ Middleware: –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω:',
    token ? `–¥–∞ (${token.substring(0, 20)}...)` : '–Ω–µ—Ç'
  )

  if (!token) {
    console.log('‚ùå Middleware: –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    return false
  }

  try {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ crypto - —Ä–∞–∑–±–∏—Ä–∞–µ–º JWT –≤—Ä—É—á–Ω—É—é
    const parts = token.split('.')
    if (parts.length !== 3) {
      console.log('‚ùå Middleware: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞')
      return false
    }

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ (–¥–ª—è middleware —ç—Ç–æ –ø—Ä–∏–µ–º–ª–µ–º–æ)
    const payload = JSON.parse(atob(parts[1]))
    console.log('üìã Middleware: Payload:', payload)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
    const isValid =
      payload.role === 'moderator' && payload.exp > Date.now() / 1000
    console.log('‚úÖ Middleware: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', isValid)

    return isValid
  } catch (error) {
    console.error('‚ùå Middleware: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error)
    return false
  }
}

export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl

  if (pathname.startsWith('/moderator')) {
    console.log('üõ°Ô∏è  Middleware: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏:', pathname)
    const isAuth = isAuthenticated(request)
    console.log('üîì Middleware: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', isAuth)

    if (pathname === '/moderator/login') {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∞–¥–º–∏–Ω–∫–∏
      if (isAuth) {
        console.log(
          '‚Ü©Ô∏è Middleware: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –ª–æ–≥–∏–Ω–µ, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /moderator'
        )
        return NextResponse.redirect(new URL('/moderator', request.url))
      }
      // –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –ª–æ–≥–∏–Ω
      console.log(
        'üë§ Middleware: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –ª–æ–≥–∏–Ω–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º'
      )
      return NextResponse.next()
    }

    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∞–¥–º–∏–Ω–∫–∏ –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if (!isAuth) {
      console.log(
        'üö´ Middleware: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω'
      )
      return NextResponse.redirect(new URL('/moderator/login', request.url))
    }

    console.log(
      '‚úÖ Middleware: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞',
      pathname
    )
  }

  return NextResponse.next()
}

export const config = {
  matcher: ['/moderator/:path*'],
}
